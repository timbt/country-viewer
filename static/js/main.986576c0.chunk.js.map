{"version":3,"sources":["dataset.js","CountryTable.js","Country.js","App.js","serviceWorker.js","index.js"],"names":["normalize","countryCode","trim","slice","toUpperCase","EnglishNameRow","name","LanguagesRow","languages","languageList","Object","values","join","CountryTable","data","official","Country","countryId","useParams","countries","cca3","countryCodeExists","countryData","country","Error","fetchCountryByCode","CountriesContext","React","createContext","worldCountries","App","Provider","value","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAEA,SAASA,EAAUC,GAMf,OAAOA,EACFC,OACAC,MAAM,EAAE,GACRC,cCTT,SAASC,EAAT,GAAmC,IAATC,EAAQ,EAARA,KAItB,OACI,4BACI,0DACA,4BAAKA,IAMjB,SAASC,EAAT,GAAsC,IAAdC,EAAa,EAAbA,UAGhBC,EAAeC,OAAOC,OAAOH,GAGjC,OACI,4BACI,kDACA,4BAAKC,EAAaG,KAAK,QAiBpBC,MAXf,YAAiC,IAATC,EAAQ,EAARA,KAEpB,OACI,+BACI,kBAACT,EAAD,CAAgBC,KAAMQ,EAAKR,KAAKS,WAChC,kBAACR,EAAD,CAAcC,UAAWM,EAAKN,cCd3BQ,MAhBf,WAAmB,IAGPC,EAAcC,cAAdD,UAGR,IFIG,SAA2BhB,GAAa,oBAMvBkB,KANuB,IAM3C,2BAA+B,CAC3B,GAD2B,QACfC,OAASpB,EAAUC,GAE3B,OAAO,GAT4B,8BAc3C,OAAO,EElBFoB,CAAkBJ,GACnB,OAAO,8DAAoCA,GAI/C,IAAMK,EFiBH,SAA4BrB,GAAa,oBAIxBkB,KAJwB,IAI5C,2BAA+B,CAAC,IAAvBI,EAAsB,QAC3B,GAAIA,EAAQH,OAASpB,EAAUC,GAE3B,OAAOsB,GAP6B,8BAY5C,MAAM,IAAIC,MAAJ,+CACsCxB,EAAUC,GADhD,yBE7BcwB,CAAmBR,GACvC,OAAO,kBAAC,EAAD,CAAcH,KAAMQ,KCPzBI,EAAmBC,IAAMC,cAAcC,KAiC9BC,MA/Bf,WAEE,OAGE,kBAACJ,EAAiBK,SAAlB,CAA2BC,MAAOH,KAGhC,gDAEA,kBAAC,IAAD,CAAQI,SAAS,KACf,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOC,KAAM,yBACX,kBAAC,EAAD,OAIF,kBAAC,IAAD,CAAOA,KAAK,KACV,gDCpBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.986576c0.chunk.js","sourcesContent":["import countries from 'world-countries';\r\n\r\nfunction normalize(countryCode) {\r\n\r\n    /* Attempt to normalize a provided string as an uppercase ISO 3166-1\r\n     * alpha-3 code.\r\n     */\r\n\r\n    return countryCode\r\n        .trim()\r\n        .slice(0,3)\r\n        .toUpperCase();\r\n\r\n}\r\n\r\nexport function countryCodeExists(countryCode) {\r\n\r\n    /* Returns true if the provided string matches an ISO 3166-1 alpha-3 code\r\n     * (country.name.cca3) found in the dataset. Returns false otherwise.\r\n     */\r\n\r\n    for (let country of countries) {\r\n        if (country.cca3 === normalize(countryCode)) {\r\n            // Found a matching country\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // No match found\r\n    return false;\r\n\r\n}\r\n\r\nexport function fetchCountryByCode(countryCode) {\r\n    \r\n    /* Returns an individual country from the world-countries dataset */\r\n\r\n    for (let country of countries) {\r\n        if (country.cca3 === normalize(countryCode)) {\r\n            // Return found country object\r\n            return country;\r\n        }\r\n    }\r\n\r\n    // No country with matching code found - throw an error\r\n    throw new Error(\r\n        `Country with ISO 3166-1 alpha-3 code ${normalize(countryCode)} could not be found.`\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\n\r\nfunction EnglishNameRow({ name }) {\r\n\r\n    // Return a table row with the provided country name\r\n\r\n    return (\r\n        <tr>\r\n            <td>Official Name (In English)</td>\r\n            <td>{name}</td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\nfunction LanguagesRow({ languages }) {\r\n    \r\n    // Extract names of languages from provided languages object\r\n    let languageList = Object.values(languages);\r\n\r\n    // Return a table row with a comma seperated list of languages\r\n    return (\r\n        <tr>\r\n            <td>Official Languages</td>\r\n            <td>{languageList.join(', ')}</td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\nfunction CountryTable({ data }) {\r\n\r\n    return (\r\n        <table>\r\n            <EnglishNameRow name={data.name.official} />\r\n            <LanguagesRow languages={data.languages} />\r\n        </table>\r\n    );\r\n\r\n}\r\n\r\nexport default CountryTable;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { countryCodeExists, fetchCountryByCode } from './dataset';\r\nimport CountryTable from './CountryTable';\r\n\r\nfunction Country() {\r\n\r\n    // CountryId passed in as URL parameter: /countries/:countryId\r\n    const { countryId } = useParams();\r\n\r\n    // Handle bad country code request\r\n    if (!countryCodeExists(countryId)) {\r\n        return <p>Could not find country with ID: {countryId}</p>;\r\n    }\r\n\r\n    // Return a country\r\n    const countryData = fetchCountryByCode(countryId);\r\n    return <CountryTable data={countryData} />;\r\n\r\n  }\r\n\r\nexport default Country;\r\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Country from './Country';\nimport worldCountries from 'world-countries';\n\n// Create a React context to contain the world countries dataset\nconst CountriesContext = React.createContext(worldCountries);\n\nfunction App() {\n\n  return (\n\n    // Provide countries context to all components\n    <CountriesContext.Provider value={worldCountries}>\n\n      {/* Application-wide header */}\n      <h1>Country Factbook</h1>\n      \n      <Router basename=\"/\">\n        <Switch>\n\n          {/* Path for when a country has been specified */}\n          <Route path ='/countries/:countryId'>\n            <Country />\n          </Route>\n\n          {/* Default path - show user search options */}\n          <Route path='/'>\n            <p>Hello world!</p>\n          </Route>\n\n        </Switch>\n      </Router>\n\n    </CountriesContext.Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}