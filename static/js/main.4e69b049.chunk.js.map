{"version":3,"sources":["EnglishNameRow.js","LanguagesRow.js","CapitalCitiesRow.js","CountryTable.js","CountriesContext.js","Country.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["EnglishNameRow","name","LanguagesRow","languages","languageList","Object","values","length","rowName","join","CapitalCitiesRow","capitalCities","rowData","CountryTable","data","official","capital","CountriesContext","React","createContext","worldCountries","normalize","countryCode","trim","slice","toUpperCase","Country","countryId","useParams","countries","useContext","cca3","countryCodeExists","countryData","country","Error","fetchCountryByCode","Search","countriesList","sort","a","b","common","map","key","value","history","useHistory","id","placeholder","onChange","event","push","target","disabled","selected","App","Provider","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAiBeA,MAff,YAAmC,IAATC,EAAQ,EAARA,KAWtB,OAAOA,EAPH,4BACI,0DACA,4BAAKA,IAKO,MCeTC,MA1Bf,YAAsC,IAAdC,EAAa,EAAbA,UAGhBC,EAAeC,OAAOC,OAAOH,GAGjC,GAA4B,IAAxBC,EAAaG,OACb,OAAO,KAKX,IAAMC,EAAkC,IAAxBJ,EAAaG,OACzB,oBACA,qBAGJ,OACI,4BACI,4BAAKC,GACL,4BAAKJ,EAAaK,KAAK,SCGpBC,MAvBf,YAA8C,IAAlBC,EAAiB,EAAjBA,cAGlBH,EAAUG,EAAcJ,OAAS,EACnC,iBACA,eAIEK,EAAWD,EAAcJ,OAAS,GAAKI,EAAc,GAAGJ,OAAS,EACvEI,EAAcF,KAAK,MACnB,oCAGA,OACI,4BACI,4BAAKD,GACL,4BAAKI,KCAFC,MAdf,YAAiC,IAATC,EAAQ,EAARA,KAEpB,OACI,+BACI,+BACI,kBAAC,EAAD,CAAgBb,KAAMa,EAAKb,KAAKc,WAChC,kBAAC,EAAD,CAAcZ,UAAWW,EAAKX,YAC9B,kBAAC,EAAD,CAAkBQ,cAAeG,EAAKE,a,gBCPvCC,EAFUC,IAAMC,cAAcC,KCE7C,SAASC,EAAUC,GAMjB,OAAOA,EACFC,OACAC,MAAM,EAAE,GACRC,cA4DQC,MAnBf,WAAmB,IAGPC,EAAcC,cAAdD,UAGFE,EAAYC,qBAAWb,GAG7B,IA9CJ,SAA2BY,EAAWP,GAAa,oBAM7BO,GAN6B,IAMjD,2BAA+B,CAC3B,GAD2B,QACfE,OAASV,EAAUC,GAE3B,OAAO,GATkC,8BAcjD,OAAO,EAgCAU,CAAkBH,EAAWF,GAC9B,OAAO,8DAAoCA,GAI/C,IAAMM,EAjCV,SAA4BJ,EAAWP,GAAa,oBAI9BO,GAJ8B,IAIlD,2BAA+B,CAAC,IAAvBK,EAAsB,QAC3B,GAAIA,EAAQH,OAASV,EAAUC,GAE3B,OAAOY,GAPmC,8BAYlD,MAAM,IAAIC,MAAJ,+CACsCd,EAAUC,GADhD,yBAqBgBc,CAAmBP,EAAWF,GAClD,OAAO,kBAAC,EAAD,CAAcb,KAAMmB,KC3BhBI,MAvCf,WAGI,IAIMC,EAJYR,qBAAWb,GAMxBsB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEvC,KAAKyC,OAASD,EAAExC,KAAKyC,OAAS,GAAK,KAErDC,KACG,SAAAT,GAAO,OACP,4BAAQU,IAAKV,EAAQH,KAAMc,MAAOX,EAAQH,MACrCG,EAAQjC,KAAKyC,WAMpBI,EAAUC,cAOhB,OACI,4BACIC,GAAG,iBACHC,YAAY,0BACZC,SARa,SAAAC,GACjBL,EAAQM,KAAR,qBAA2BD,EAAME,OAAOR,UASpC,4BAAQA,MAAM,GAAGS,UAAQ,EAACC,UAAQ,GAAlC,uBACCjB,ICIEkB,MA/Bf,WAEE,OAGE,kBAAC,EAAiBC,SAAlB,CAA2BZ,MAAOzB,KAGhC,gDAEA,kBAAC,IAAD,CAAQsC,SAAS,KAGf,kBAAC,EAAD,MAEA,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOC,KAAM,yBACX,kBAAC,EAAD,WClBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e69b049.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction EnglishNameRow({ name }) {\r\n\r\n    // Return a table row with the provided country name\r\n    const row =  (\r\n        <tr>\r\n            <td>Official Name (In English)</td>\r\n            <td>{name}</td>\r\n        </tr>\r\n    );\r\n\r\n    // Only render the component if a name was provided\r\n    return name ? row : null;\r\n\r\n}\r\n\r\nexport default EnglishNameRow;\r\n","import React from 'react';\r\n\r\nfunction LanguagesRow({ languages }) {\r\n    \r\n    // Extract names of languages from provided languages object\r\n    let languageList = Object.values(languages);\r\n\r\n    // Do not render the row if there is no data to display\r\n    if (languageList.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    // Set the row's name as singular or plural based on the number of\r\n    // languages provided.\r\n    const rowName = languageList.length === 1 ? \r\n        'Official Language' : \r\n        'Official Languages'\r\n\r\n    // Return a table row with a comma seperated list of languages\r\n    return (\r\n        <tr>\r\n            <td>{rowName}</td>\r\n            <td>{languageList.join(', ')}</td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\nexport default LanguagesRow;\r\n","import React from 'react';\r\n\r\nfunction CapitalCitiesRow({ capitalCities }) {\r\n    \r\n    // Row name should be plural if there is more than one capital city\r\n    const rowName = capitalCities.length > 1 ? \r\n        'Capital Cities' :\r\n        'Capital City'\r\n\r\n    // Row data should be 'none' if there are no capital cities, or a comma\r\n    // seperated list otherwise.\r\n    const rowData = (capitalCities.length > 0 && capitalCities[0].length > 0) ?\r\n    capitalCities.join(', ') :\r\n    <em>none</em>\r\n\r\n    // Render and return the table row\r\n    return (\r\n        <tr>\r\n            <td>{rowName}</td>\r\n            <td>{rowData}</td>\r\n        </tr>\r\n    );\r\n\r\n}\r\n\r\nexport default CapitalCitiesRow;\r\n","import React from 'react';\nimport EnglishNameRow from './EnglishNameRow';\nimport LanguagesRow from './LanguagesRow';\nimport CapitalCitiesRow from './CapitalCitiesRow';\n\nfunction CountryTable({ data }) {\n\n    return (\n        <table>\n            <tbody>\n                <EnglishNameRow name={data.name.official} />\n                <LanguagesRow languages={data.languages} />\n                <CapitalCitiesRow capitalCities={data.capital} />\n            </tbody>\n        </table>\n    );\n\n}\n\nexport default CountryTable;\n","import React from 'react';\r\nimport worldCountries from 'world-countries';\r\n\r\nconst CountriesContext = React.createContext(worldCountries);\r\n\r\nexport default CountriesContext;\r\n","import React, { useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport CountryTable from './CountryTable';\r\nimport CountriesContext from './CountriesContext';\r\n\r\nfunction normalize(countryCode) {\r\n\r\n  /* Attempt to normalize a provided string as an uppercase ISO 3166-1\r\n   * alpha-3 code.\r\n   */\r\n\r\n  return countryCode\r\n      .trim()\r\n      .slice(0,3)\r\n      .toUpperCase();\r\n\r\n}\r\n\r\nfunction countryCodeExists(countries, countryCode) {\r\n\r\n  /* Returns true if the provided string matches an ISO 3166-1 alpha-3 code\r\n   * (country.name.cca3) found in the dataset. Returns false otherwise.\r\n   */\r\n\r\n  for (let country of countries) {\r\n      if (country.cca3 === normalize(countryCode)) {\r\n          // Found a matching country\r\n          return true;\r\n      }\r\n  }\r\n\r\n  // No match found\r\n  return false;\r\n\r\n}\r\n\r\nfunction fetchCountryByCode(countries, countryCode) {\r\n    \r\n  /* Returns an individual country from the world-countries dataset */\r\n\r\n  for (let country of countries) {\r\n      if (country.cca3 === normalize(countryCode)) {\r\n          // Return found country object\r\n          return country;\r\n      }\r\n  }\r\n\r\n  // No country with matching code found - throw an error\r\n  throw new Error(\r\n      `Country with ISO 3166-1 alpha-3 code ${normalize(countryCode)} could not be found.`\r\n  );\r\n\r\n}\r\n\r\n\r\nfunction Country() {\r\n\r\n    // CountryId passed in as URL parameter: /countries/:countryId\r\n    const { countryId } = useParams();\r\n\r\n    // Obtain countries dataset from countries context provider\r\n    const countries = useContext(CountriesContext);\r\n \r\n    // Handle bad country code request\r\n    if (!countryCodeExists(countries, countryId)) {\r\n        return <p>Could not find country with ID: {countryId}</p>;\r\n    }\r\n\r\n    // Return a country\r\n    const countryData = fetchCountryByCode(countries, countryId);\r\n    return <CountryTable data={countryData} />;\r\n\r\n  }\r\n\r\nexport default Country;\r\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport CountriesContext from './CountriesContext';\n\nfunction Search() {\n\n    // Obtain the countries dataset to create a searchable list of countries.\n    const countries = useContext(CountriesContext);\n\n    // Transform list of countries from the dataset into a list of <option>\n    // tags\n    const countriesList = countries\n        // Sort countries alphabetically by common name\n        .sort((a, b) => (a.name.common > b.name.common ? 1 : -1))\n        // Map each country to an <option> element\n        .map(\n            country => (\n            <option key={country.cca3} value={country.cca3}>\n                {country.name.common}\n            </option>\n        ));\n\n    // react-redux history used to allow form to redirect to the URL of the\n    // selected country\n    const history = useHistory();\n\n    // Redirect to the selected country on user input\n    const handleChange = event => {\n        history.push(`/countries/${event.target.value}`);\n    };\n\n    return (                    \n        <select \n            id=\"countries-list\"\n            placeholder=\"Enter a country name...\"\n            onChange={handleChange}\n        >\n            <option value=\"\" disabled selected>Choose a country...</option>\n            {countriesList}\n        </select>\n    );\n}\n\nexport default Search;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Country from './Country';\nimport worldCountries from 'world-countries';\nimport CountriesContext from './CountriesContext';\nimport Search from './Search';\n\nfunction App() {\n\n  return (\n\n    // Provide countries context to all components\n    <CountriesContext.Provider value={worldCountries}>\n\n      {/* Application-wide header */}\n      <h1>Country Factbook</h1>\n      \n      <Router basename=\"/\">\n\n        {/* Search bar for looking up a country */}\n        <Search />\n        \n        <Switch>\n\n          {/* Path for when a country has been specified */}\n          <Route path ='/countries/:countryId'>\n            <Country />\n          </Route>\n\n        </Switch>\n      </Router>\n\n    </CountriesContext.Provider>\n    \n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}